import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';
import _classCallCheck from '@babel/runtime/helpers/classCallCheck';
import _createClass from '@babel/runtime/helpers/createClass';
import _get from '@babel/runtime/helpers/get';
import _inherits from '@babel/runtime/helpers/inherits';
import _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';
import _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';
import _regeneratorRuntime from '@babel/runtime/regenerator';
import { getChainConfig, CHAIN_NAMESPACES, WalletLoginError, saveToken, verifySignedChallenge, signChallenge, getSavedToken, checkIfTokenIsExpired, ADAPTER_STATUS, clearToken, ADAPTER_EVENTS, BaseAdapter } from '@web3auth/base';

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var BaseEvmAdapter = /*#__PURE__*/function (_BaseAdapter) {
  _inherits(BaseEvmAdapter, _BaseAdapter);
  var _super = _createSuper(BaseEvmAdapter);
  function BaseEvmAdapter() {
    _classCallCheck(this, BaseEvmAdapter);
    return _super.apply(this, arguments);
  }
  _createClass(BaseEvmAdapter, [{
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);
              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function init(_x) {
        return _init.apply(this, arguments);
      }
      return init;
    }()
  }, {
    key: "authenticateUser",
    value: function () {
      var _authenticateUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var _this$chainConfig, chainNamespace, chainId, accounts, existingToken, isExpired, payload, challenge, signedMessage, idToken;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(!this.provider || this.status !== ADAPTER_STATUS.CONNECTED)) {
                  _context2.next = 2;
                  break;
                }
                throw WalletLoginError.notConnectedError();
              case 2:
                _this$chainConfig = this.chainConfig, chainNamespace = _this$chainConfig.chainNamespace, chainId = _this$chainConfig.chainId;
                _context2.next = 5;
                return this.provider.request({
                  method: "eth_accounts"
                });
              case 5:
                accounts = _context2.sent;
                if (!(accounts && accounts.length > 0)) {
                  _context2.next = 24;
                  break;
                }
                existingToken = getSavedToken(accounts[0], this.name);
                if (!existingToken) {
                  _context2.next = 12;
                  break;
                }
                isExpired = checkIfTokenIsExpired(existingToken);
                if (isExpired) {
                  _context2.next = 12;
                  break;
                }
                return _context2.abrupt("return", {
                  idToken: existingToken
                });
              case 12:
                payload = {
                  domain: window.location.origin,
                  uri: window.location.href,
                  address: accounts[0],
                  chainId: parseInt(chainId, 16),
                  version: "1",
                  nonce: Math.random().toString(36).slice(2),
                  issuedAt: new Date().toISOString()
                };
                _context2.next = 15;
                return signChallenge(payload, chainNamespace);
              case 15:
                challenge = _context2.sent;
                _context2.next = 18;
                return this.provider.request({
                  method: "personal_sign",
                  params: [challenge, accounts[0]]
                });
              case 18:
                signedMessage = _context2.sent;
                _context2.next = 21;
                return verifySignedChallenge(chainNamespace, signedMessage, challenge, this.name, this.sessionTime, this.clientId, this.web3AuthNetwork);
              case 21:
                idToken = _context2.sent;
                saveToken(accounts[0], this.name, idToken);
                return _context2.abrupt("return", {
                  idToken: idToken
                });
              case 24:
                throw WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");
              case 25:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function authenticateUser() {
        return _authenticateUser.apply(this, arguments);
      }
      return authenticateUser;
    }()
  }, {
    key: "disconnectSession",
    value: function () {
      var _disconnectSession = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var accounts;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _get(_getPrototypeOf(BaseEvmAdapter.prototype), "checkDisconnectionRequirements", this).call(this);
                _context3.next = 3;
                return this.provider.request({
                  method: "eth_accounts"
                });
              case 3:
                accounts = _context3.sent;
                if (accounts && accounts.length > 0) {
                  clearToken(accounts[0], this.name);
                }
              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
      function disconnectSession() {
        return _disconnectSession.apply(this, arguments);
      }
      return disconnectSession;
    }()
  }, {
    key: "disconnect",
    value: function () {
      var _disconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.rehydrated = false;
                this.emit(ADAPTER_EVENTS.DISCONNECTED);
              case 2:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
      function disconnect() {
        return _disconnect.apply(this, arguments);
      }
      return disconnect;
    }()
  }]);
  return BaseEvmAdapter;
}(BaseAdapter);

export { BaseEvmAdapter };
//# sourceMappingURL=baseEvmAdapter.esm.js.map
